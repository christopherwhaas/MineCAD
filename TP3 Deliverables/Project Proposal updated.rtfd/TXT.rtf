{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww15560\viewh14720\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
MineCad\
	 - a 3D first-person CAD software with the ability to build 3D structures made of blocks.\
\
The game design will be similar to Minecraft in terms of placing cube blocks, and the ability to build structures. The game differs with the ability to 3D Print the structures that are built. The idea is to make a CAD software that is more user friendly and simple so it can reach a larger audience. Obviously, there will be tradeoffs between other CAD softwares (i.e. no complex structures, less availability of shapes, lower scale projects, etc.) but the simplicity will introduce beginners to CAD and other engineering software basics. The hope is that the software could introduce a younger audience to STEM in an evolving technological world.\
\
Basic Structure:\
\
MineCAD: Project Folder\
	settings.py: File containing variables that will be constant, along with the dynamic dictionary of blocks(Coords) and color in the world\
	Game.py: Main window class, this file will be the class that runs all the other class/files within the main project folder\
	Block.py: Basic Block classes that add to the block dict with color and position\
	Player.py: Controls coords of position on game grid, along with player movement/mechanics\
	Ground.py: Sets up the grid on which the player can move/place blocks\
	Textures: Folder of textures used in the game\
\
Algorithmic Plan:\
	Collisions: Loop through the dictionary of blocks placed and compare to (player position + move) to see if they are within the block, if they 		are in block, don\'92t allow move, else, allow the movement.\
	Get Position of Mouse in 3D space : Need the ability to find x,y,z coords of mouse to place blocks at desired position. \
		- Get vector of the sight that gives angles of view, the use a function that tests what is getting \'93hit\'94 by the vector in the field of sight,\
			and return the first position that the vector \'93hits\'94\
	STL File Format: Convert list of coordinates of the blocks to a file that is readable to a 3D printer\
		- Create a list of coordinates of each cube and convert to STL format\
Timeline Plan:\
TP1 - Have a basic structure of the game, along with player movement, block selection and gravity, along with ability to place block on click\
TP2 - Have a fully functioning game that can place blocks at desired x,y,z coordinates, along with better physics of player, and no illegal block 	placement(must be attached to another block), Save and load previous structures, and title screen. Begin working on File conversion to STL 	format.\
TP3 - Completed game and STL conversion ability. Video and demo of 3D printed structure as well.\
\
Version Control Plan:\
	Upload Folder to Google Drive every time significant portions of code are added to project.\
                      {{\NeXTGraphic Screen Shot 2018-04-17 at 3.15.59 PM.png \width7340 \height2180 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\
\
Module List:\
	Pyglet (OpenGL built in)\
	numpy (Vector manipulation)\
\
TP2 Update:\
\
Module List Update:\
Pyglet\
numpy-stl (works to triangulate data points for a stl file format)\
\
\
Project Folder Update:\
Game.py\
Player.py\
Block.py\
settings.py\
textures - dir\
*new*\
Screen.py(has all the screen classes other than the title screen: Pause, Load, Save, StlConvert)\
StartScreen.py: has the title screen class that draws selection and background\
SaveMap.py: class in which you can save the map to 1-4 slots\
LoadMap.py: class in which you can load 1-4 slots of saved maps\
stlConvert.py: class that allows you to convert a saved map into an stl file\
saves - dir: folder with \'91saves1.txt\'92 - \'91saves4.txt\'92 that saves the dictionary of blocks\
\
\
TP3 Update:\
\
Design:\
*new*\
Implemented sockets to allow for networked multiplayer. \
Implemented new save/load/select system (User input for save name and List of Files instead of Slot 1-4 method previously used) \
Cleaned up user interface\
\
Project Folder Update:\
*new*\
stlFiles - dir: folder to store converted stlFiles\
installModule.py - Used to install modules for first time users\
module_manager.py - by Austin Schick, used to install modules easily\
server.py - File that initializes a server if Multiplayer is desired.\
README.txt - Instructions for how to run the game initially, along with potential bug fix on some Computers\
\
\
	\
}